package com.nocreativity.webcam {	import flash.display.*;	import flash.events.*;	import flash.filters.*;	import flash.geom.*;	import flash.media.*;	public class MotionDetector extends Sprite {		private var detection:Sprite;		public var detectionRect:Rectangle;		private var bf:BlurFilter;		private var cmf:ColorMatrixFilter;		private var olddata:BitmapData;		private var newdata:BitmapData;		private var diffdata:BitmapData;		private var oldbm:Bitmap;		private var newbm:Bitmap;		private var diffbm:Bitmap;		private var display:Sprite;		private var diffholder:Sprite;		private var detectionholder:Sprite;		private var detectionbmd:BitmapData;		private var detectionbm:Bitmap;		private var thresholdbmd:BitmapData;		private var thresholdbm:Bitmap;		private var thresholdholder:Sprite;				private var video:Video;								///.......settings.......///		private var running:Boolean=false;		private var _enableDrawing:Boolean=true;				public var rectColor:uint = 0xFF0066;		public var rectThickness:uint = 3;				public function MotionDetector(width:Number,height:Number,cam:Camera=null,autoStart:Boolean=true):void {			//super();			video = new Video(width,height);			addChild(video);						detection = new Sprite();			addChild(detection);			bf = new BlurFilter(5,5,5);			cmf = new ColorMatrixFilter([			   5,5,5,0,0,			   5,5,5,0,0,			   5,5,5,0,0,			   0,0,0,6,0			   ]);			olddata = new BitmapData(width,height,false,0);			newdata = new BitmapData(width,height,false,0);			diffdata = new BitmapData(width,height,false,0);			oldbm = new Bitmap(olddata);			newbm = new Bitmap(newdata);			diffbm = new Bitmap(diffdata);			display = new Sprite();			display.addChild(newbm);			display.addChild(oldbm);			oldbm.blendMode = BlendMode.DIFFERENCE;			diffholder =new Sprite();			diffholder.addChild(diffbm);			detectionholder =new Sprite();			detectionbmd =new BitmapData(width,height,true,0x000000);			detectionbm = new Bitmap(detectionbmd);			detectionholder.addChild(detectionbm);			thresholdbmd = new BitmapData(video.width,video.height,false,0x000000);			thresholdbm=new Bitmap(thresholdbmd);			thresholdholder = new Sprite();			thresholdholder.addChild(thresholdbm);			if (cam!=null) {				video.attachCamera(cam);				if(autoStart){					startDetection();				}			}		}		public function attachCamera(camera:Camera):void{			video.attachCamera(camera);		}		public function startDetection():void {			running=true;			addEventListener(Event.ENTER_FRAME, loop);		}		public function stopDetection():void {			running=false;			removeEventListener(Event.ENTER_FRAME, loop);		}				public function get enabled():Boolean{			return running;		}		public function get mirroredDetectionRect():Rectangle{			if(!running){				return new Rectangle();			}			var rect:Rectangle = new Rectangle();			rect.x = video.width-detectionRect.x-detectionRect.width;			rect.y = detectionRect.y;			rect.width = detectionRect.width;			rect.height = detectionRect.height;			return rect;		}				public function get enableDrawing():Boolean{			return _enableDrawing;		}		public function set enableDrawing(value:Boolean):void{			_enableDrawing = value;			if(!_enableDrawing){				detection.graphics.clear();			}		}				private function loop(e:Event):void {			olddata.draw(newdata);			newdata.draw(video);			newdata.applyFilter(newdata,newdata.rect,new Point(0,0),bf);			diffdata.draw(display);			diffdata.applyFilter(diffdata,diffdata.rect,new Point(0,0),bf);			diffdata.applyFilter(diffdata,diffdata.rect,new Point(0,0),cmf);			detectionbmd.draw(diffbm);			thresholdbmd.threshold(detectionbmd,detectionbmd.rect,new Point(0,0),'<',0xCCCCCC,0x000000,0xFFCC00,true);			detectionRect = thresholdbmd.getColorBoundsRect(0xFFFFFF,0xFFFFFF,true);			draw();		}		private function draw():void{			if (detectionRect.width>10 && detectionRect.height>10) {				if(enableDrawing){					detection.graphics.clear();					detection.graphics.lineStyle(rectThickness,rectColor);					detection.graphics.drawRect(detectionRect.x,detectionRect.y,detectionRect.width,detectionRect.height);				}				dispatchEvent(new DetectionEvent(DetectionEvent.DETECT,detectionRect));			}		}	}}